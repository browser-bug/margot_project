include(CMakeFindDependencyMacro)

# Find the Boost library dependency
find_dependency(Boost REQUIRED program_options)

# Add the targets file
include("${CMAKE_CURRENT_LIST_DIR}/@HEEL_BINARY_NAME@Targets.cmake")

# Define the CMake function that generates the high-level interface for
# the application, to be used when compiling the application
# The expected parameter is the margot configuration file. If the user
# would like to provide the application knowledge as a list of Operating
# Points, he/she can append them when calling the function
set(DEFAULT_MARGOT_HEEL_INTERFACE_CMAKE_PATH "${CMAKE_CURRENT_LIST_DIR}/margot_heel_interface.cmake" CACHE INTERNAL "")
set(MARGOT_FINDERS_PATH "${CMAKE_CURRENT_LIST_DIR}" CACHE INTERNAL "")
function(margot_heel_generate_interface MARGOT_CONFIG_FILE )

       # check if we actually have the margot configuration file
       if ("${ARGC}" EQUAL "0")
               message(FATAL_ERROR "Unable to generate the application interface without configuration files")
               message(STATUS "Function usage:")
               message(STATUS "margot_heel_generate_interface( <PATH_MARGOT_CONFIG_FILE> [<PATH_OP_LIST>]*")
       endif ("${ARGC}" EQUAL "0")


       # now we have to create and customize the CMake project for the interface
       set(MARGOT_CONFIG_PATH "${MARGOT_CONFIG_FILE}")
       set(MARGOT_OPS_PATH "${ARGN}")
       configure_file("${DEFAULT_MARGOT_HEEL_INTERFACE_CMAKE_PATH}"
                      "${CMAKE_CURRENT_BINARY_DIR}/margot_heel_interface/CMakeLists.txt" COPYONLY)

       # finally, we had that project
       add_subdirectory( ${CMAKE_CURRENT_BINARY_DIR}/margot_heel_interface )

endfunction(margot_heel_generate_interface)
