def plot2dtraces( experiment_data, header ):
	"""
	Generate the gnuplot script that generate the plot
	"""

	# print the header
	print("""######### AUTOGENERATED GNUPLOT SCRIPT ##############
unset log                              # remove any log-scaling
unset label                            # remove any previous labels

set autoscale                          # scale axes automatically
set xtic auto                          # set xtics automatically
set ytic auto                          # set ytics automatically
set key above                          # set the legend

set terminal pdf size 7,5 enhanced font "Verdana,20"

# Line style for axes and grid
set style line 80 lt 1 lw 2
set style line 80 lc rgb "#000000" lw 2
set style line 81 lt 3 lw 1  # dashed
set style line 81 lt rgb "#808080" lw 2  # grey


# Beautify the grid and the axis
set grid back linestyle 81
set border 3 back linestyle 80
set xtics nomirror
set ytics nomirror

# Line styles for the data traces
set style line 1 lt rgb "#1f78b4" lw 4 pt 7
set style line 2 lt 1 lc rgb "#33a02c" lw 4 pt 9
set style line 3 lt rgb "#e31a1c" lw 4 pt 5
set style line 4 lt rgb "#ff7f00" lw 4 pt 13
set style line 5 lt rgb "#6a3d9a" lw 4 pt 7
set style line 6 lt rgb "#b15928" lw 4 pt 9
set style line 7 lt rgb "#a6cee3" lw 4 pt 5
set style line 8 lt rgb "#b2df8a" lw 4 pt 13
set style line 9 lt rgb "#fb9a99" lw 4 pt 7
set style line 10 lt rgb "#fdbf6f" lw 4 pt 9
set style line 11 lt rgb "#cab2d6" lw 4 pt 5
set style line 12 lt rgb "#ffff99" lw 4 pt 13
""")

	print('\n')

	# define the labels on the axys
	x_label = "unknown"
	y_label = "unknown"
	for label_name in header:
		if header[label_name] == 0:
			x_label = label_name
		if header[label_name] == 1:
			y_label = label_name
	print('set xlabel "{0}"'.format(x_label))
	print('set ylabel "{0}"'.format(y_label))

	print('\n')


	# print the plot commands
	counter = 1
	plot_commands = []
	for trace_id in experiment_data:
		for label_name in header:
			if label_name != x_label:
				plot_commands.append('\t\'-\' using 1:{0} title "{1}.{2}" with linespoints ls {3}'.format(header[label_name] + 1, trace_id, label_name, counter))
				counter += 1
	print('plot \\\n{0}'.format(', \\\n'.join(plot_commands)))


	# print the data
	for trace_id in experiment_data:
		for label_name in header:
			if label_name != x_label:
				print('# Data for plot "{0}.{1}"'.format(header[label_name], trace_id))
				data = experiment_data[trace_id]
				for row in data:
					print('{0}'.format(' '.join( str(x) for x in row)))
				print('e')
